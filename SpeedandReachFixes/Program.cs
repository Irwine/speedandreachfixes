using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using System.Threading.Tasks;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using System;
using System.Text;

namespace SpeedandReachFixes
{
    public class Program
    {
        static Lazy<Settings> _Settings = null!;
        static Settings Settings => _Settings.Value;

        public static Task<int> Main(string[] args)
        {
            return SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SpeedAndReachFixes.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _Settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
            {
                EditorID = "fObjectHitWeaponReach",
                Data = 81
            });

            state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
            {
                EditorID = "fObjectHitTwoHandReach",
                Data = 135
            });

            state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease)
            {
                EditorID = "fObjectHitH2HReach",
                Data = 61
            });

            foreach (var gmst in state.LoadOrder.PriorityOrder.GameSetting().WinningOverrides())
            {
                if (gmst.EditorID?.Contains("fCombatDistance") == true)
                {
                    var modifiedGmst = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    ((GameSettingFloat)modifiedGmst).Data = 141;
                }

                if (gmst.EditorID?.Contains("fCombatBashReach") == true)
                {
                    var modifiedGmst = state.PatchMod.GameSettings.GetOrAddAsOverride(gmst);
                    ((GameSettingFloat)modifiedGmst).Data = 61;
                }
            }

            if (Settings.WeaponSwingAngleChanges)
            {
                foreach (var race in state.LoadOrder.PriorityOrder.Race().WinningOverrides())
                {
                    if (race.Attacks == null) continue;

                    if (!race.HasKeyword(Skyrim.Keyword.ActorTypeNPC)) continue;

                    var modifiedRace = state.PatchMod.Races.GetOrAddAsOverride(race);

                    if (modifiedRace.Name != null && modifiedRace.Name.TryLookup(Language.French, out string i18nRaceName)) {
                        modifiedRace.Name = Encoding.GetEncoding("ISO-8859-1").GetString(Encoding.UTF8.GetBytes(i18nRaceName));
                    }
                    if (modifiedRace.Description != null && modifiedRace.Description.TryLookup(Language.French, out string i18nRaceName)) {
                        modifiedRace.Description = Encoding.GetEncoding("ISO-8859-1").GetString(Encoding.UTF8.GetBytes(i18nRaceName));
                    }
                    
                    foreach (var attack in modifiedRace.Attacks)
                    {
                        if (attack.AttackData == null) continue;
                        attack.AttackData.StrikeAngle = attack.AttackData.StrikeAngle + 7;
                    }
                }
            }

            foreach (var weap in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
            {
                if (weap.Data == null) continue;

                var weapon = state.PatchMod.Weapons.GetOrAddAsOverride(weap);
                
                if (weapon.Name != null && weapon.Name.TryLookup(Language.French, out string i18nWeaponName)) {
                    weapon.Name = Encoding.GetEncoding("ISO-8859-1").GetString(Encoding.UTF8.GetBytes(i18nWeaponName));
                }

                Program.AdjustWeaponReach(weapon);
                Program.AdjustWeaponSpeed(weapon);
            }
        }

        public static void AdjustWeaponReach(Weapon weapon)
        {
            if (weapon.Data == null) return;

            // Set the vanilla values first so that they can be overidden by more specific
            // settings later such as the case with Animated Armory where multiple keywords
            // for weapon type exist on a single weapon.
            if      (weapon.HasKeyword(Skyrim.Keyword.WeapTypeBattleaxe))  weapon.Data.Reach = Settings.Battleaxe.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeDagger))     weapon.Data.Reach = Settings.Dagger.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeGreatsword)) weapon.Data.Reach = Settings.Greatsword.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeMace))       weapon.Data.Reach = Settings.Mace.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeSword))      weapon.Data.Reach = Settings.Sword.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeWarAxe))     weapon.Data.Reach = Settings.WarAxe.Reach;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeWarhammer))  weapon.Data.Reach = Settings.Warhammer.Reach;

            // Animated Armoury support
            if      (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeCestus))     weapon.Data.Reach = weapon.Data.Reach - Settings.Cestus.Reach;     // Intentionally left untouched
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeClaw))       weapon.Data.Reach = weapon.Data.Reach - Settings.Claw.Reach;
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeHalberd))    weapon.Data.Reach = weapon.Data.Reach - Settings.Halberd.Reach;
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypePike))       weapon.Data.Reach = weapon.Data.Reach - Settings.Pike.Reach;
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeQtrStaff))   weapon.Data.Reach = weapon.Data.Reach - Settings.QuarterStaff.Reach;
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeRapier))     weapon.Data.Reach = weapon.Data.Reach - Settings.Rapier.Reach;
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeSpear))      weapon.Data.Reach = weapon.Data.Reach - Settings.Spear.Reach;     // Intentionally left untouched
            else if (weapon.HasKeyword(NewArmoury.Keyword.WeapTypeWhip))       weapon.Data.Reach = weapon.Data.Reach - Settings.Whip.Reach;

            // Revert any changes to giant clubs as they may cause issues with the AI
            if (weapon.EditorID?.ContainsInsensitive("GiantClub") == true)
            {
                weapon.Data.Reach = 1.3F;
            }
        }

        public static void AdjustWeaponSpeed(Weapon weapon)
        {
            if (weapon.Data == null) return;

            HashSet<FormKey> exclusionList = new()
            {
                NewArmoury.Keyword.WeapTypeCestus,
                NewArmoury.Keyword.WeapTypeClaw,
                NewArmoury.Keyword.WeapTypeHalberd,
                NewArmoury.Keyword.WeapTypePike,
                NewArmoury.Keyword.WeapTypeQtrStaff,
                NewArmoury.Keyword.WeapTypeRapier,
                NewArmoury.Keyword.WeapTypeSpear,
                NewArmoury.Keyword.WeapTypeWhip,
            };

            if (weapon.Keywords.EmptyIfNull().Any(k => exclusionList.Contains(k.FormKey))) return;

            if      (weapon.HasKeyword(Skyrim.Keyword.WeapTypeBattleaxe))  weapon.Data.Speed = Settings.Battleaxe.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeDagger))     weapon.Data.Speed = Settings.Dagger.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeGreatsword)) weapon.Data.Speed = Settings.Greatsword.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeMace))       weapon.Data.Speed = Settings.Mace.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeSword))      weapon.Data.Speed = Settings.Sword.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeWarAxe))     weapon.Data.Speed = Settings.WarAxe.Speed;
            else if (weapon.HasKeyword(Skyrim.Keyword.WeapTypeWarhammer))  weapon.Data.Speed = Settings.Warhammer.Speed;
        }
    }
}
